{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar LanguageContext = createContext(undefined);\nvar LANGUAGE_STORAGE_KEY = \"app_language\";\nexport var supportedLanguages = [{\n  code: \"tr\",\n  name: \"Turkish\",\n  nativeName: \"Türkçe\"\n}, {\n  code: \"en\",\n  name: \"English\",\n  nativeName: \"English\"\n}];\nexport var LanguageProvider = function LanguageProvider(_ref) {\n  var children = _ref.children;\n  var _useTranslation = useTranslation(),\n    i18n = _useTranslation.i18n;\n  var _useState = useState(i18n.language || \"tr\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentLanguage = _useState2[0],\n    setCurrentLanguage = _useState2[1];\n  useEffect(function () {\n    loadSavedLanguage();\n  }, []);\n  var loadSavedLanguage = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var savedLanguage = yield AsyncStorage.getItem(LANGUAGE_STORAGE_KEY);\n        if (savedLanguage && savedLanguage !== currentLanguage) {\n          yield changeLanguage(savedLanguage);\n        }\n      } catch (error) {\n        console.error(\"Error loading saved language:\", error);\n      }\n    });\n    return function loadSavedLanguage() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var changeLanguage = function () {\n    var _ref3 = _asyncToGenerator(function* (language) {\n      try {\n        yield i18n.changeLanguage(language);\n        setCurrentLanguage(language);\n        yield AsyncStorage.setItem(LANGUAGE_STORAGE_KEY, language);\n        console.log(`Language changed to: ${language}`);\n      } catch (error) {\n        console.error(\"Error changing language:\", error);\n      }\n    });\n    return function changeLanguage(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var contextValue = {\n    currentLanguage: currentLanguage,\n    changeLanguage: changeLanguage,\n    supportedLanguages: supportedLanguages\n  };\n  return _jsx(LanguageContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n};\nexport var useLanguage = function useLanguage() {\n  var context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n};\nexport default LanguageProvider;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useTranslation","AsyncStorage","jsx","_jsx","LanguageContext","undefined","LANGUAGE_STORAGE_KEY","supportedLanguages","code","name","nativeName","LanguageProvider","_ref","children","_useTranslation","i18n","_useState","language","_useState2","_slicedToArray","currentLanguage","setCurrentLanguage","loadSavedLanguage","_ref2","_asyncToGenerator","savedLanguage","getItem","changeLanguage","error","console","apply","arguments","_ref3","setItem","log","_x","contextValue","Provider","value","useLanguage","context","Error"],"sources":["/app/code/src/contexts/LanguageContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\ninterface LanguageContextType {\n  currentLanguage: string;\n  changeLanguage: (language: string) => Promise<void>;\n  supportedLanguages: { code: string; name: string; nativeName: string }[];\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(\n  undefined,\n);\n\nconst LANGUAGE_STORAGE_KEY = \"app_language\";\n\nexport const supportedLanguages = [\n  { code: \"tr\", name: \"Turkish\", nativeName: \"Türkçe\" },\n  { code: \"en\", name: \"English\", nativeName: \"English\" },\n];\n\nexport const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const { i18n } = useTranslation();\n  const [currentLanguage, setCurrentLanguage] = useState<string>(\n    i18n.language || \"tr\",\n  );\n\n  useEffect(() => {\n    // Load saved language on app start\n    loadSavedLanguage();\n  }, []);\n\n  const loadSavedLanguage = async () => {\n    try {\n      const savedLanguage = await AsyncStorage.getItem(LANGUAGE_STORAGE_KEY);\n      if (savedLanguage && savedLanguage !== currentLanguage) {\n        await changeLanguage(savedLanguage);\n      }\n    } catch (error) {\n      console.error(\"Error loading saved language:\", error);\n    }\n  };\n\n  const changeLanguage = async (language: string) => {\n    try {\n      // Change i18n language\n      await i18n.changeLanguage(language);\n\n      // Update state\n      setCurrentLanguage(language);\n\n      // Save to AsyncStorage\n      await AsyncStorage.setItem(LANGUAGE_STORAGE_KEY, language);\n\n      console.log(`Language changed to: ${language}`);\n    } catch (error) {\n      console.error(\"Error changing language:\", error);\n    }\n  };\n\n  const contextValue: LanguageContextType = {\n    currentLanguage,\n    changeLanguage,\n    supportedLanguages,\n  };\n\n  return (\n    <LanguageContext.Provider value={contextValue}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = (): LanguageContextType => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n};\n\nexport default LanguageProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}